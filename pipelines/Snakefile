from snakemake.utils import Paramspace
import pandas as pd
from fdr_hacking.util import parse_yaml_file
from scripts.generate_simulation_params import generate_simulation_params

workflow_config_yaml = config["workflow_config"]
workflow_config = parse_yaml_file(workflow_config_yaml)
simulation_params = config.get("simulation_params", "../tests/mocks/snakemake_simulation_params.tsv")
workflow_reporting_config = workflow_config['reporting']
generate_simulation_params(workflow_config['simulating'], simulation_params)
simulation_params_df = pd.read_csv(simulation_params, sep="\t")
simulation_paramspace = Paramspace(simulation_params_df)

rule all:
    input:
        directory("results/plots/histograms/")

rule generate_data:
    params:
        simulation = simulation_paramspace.instance
    output:
        data = f"results/simulations/{simulation_paramspace.wildcard_pattern}.tsv",
        config = f"results/config_files/{simulation_paramspace.wildcard_pattern}.yaml"
    shell:
        'simulate_data --config "{params.simulation}" --output "{output.data}" --config_file_path "{output.config}"'

rule statistical_analysis:
    input:
        data = f"results/simulations/{simulation_paramspace.wildcard_pattern}.tsv",
        config = f"results/config_files/{simulation_paramspace.wildcard_pattern}.yaml"
    output:
        f"results/statistical_testing/{simulation_paramspace.wildcard_pattern}.tsv"
    shell:
        'statistical_test --config "{workflow_config_yaml}" --data_path "{input.data}" --sim_config "{input.config}" --output "{output}"'

rule concatenate_results:
    input:
        expand('results/statistical_testing/{params}.tsv',params=simulation_paramspace.instance_patterns)
    output:
        "results/concatenated_results.tsv"
    run:
        df = pd.concat([pd.read_csv(f, sep="\t") for f in input])
        df.to_csv(output[0], sep="\t", index=False)

rule aggregate_results:
    input:
        concatenated_results = "results/concatenated_results.tsv"
    output:
        aggregated_results = "results/aggregated_results.tsv",
        boxplots_dir= directory("results/plots/boxplots/")
    shell:
        """
        calculate_hist_results --concatenated_results "{input.concatenated_results}" --aggregated_results "{output.aggregated_results}"
        plot_comparative_boxcharts --concatenated_results "{input.concatenated_results}" --reporting_config_file "{workflow_config_yaml}" --output_dir {output.boxplots_dir}
        """

rule plot_results:
    input:
        results_file = "results/aggregated_results.tsv"
    output:
        histograms_dir = directory("results/plots/histograms/")
    shell:
        'plot_histograms --aggregated_results "{input.results_file}" --output_dir "{output.histograms_dir}" --with_title'
