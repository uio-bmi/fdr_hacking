import ast
import numpy as np
from snakemake.utils import Paramspace
import pandas as pd
from scripts.generate_workflow_params import generate_workflow_params

workflow_config = config["workflow_config"]
workflow_params = config.get("workflow_params", "../tests/mocks/snakemake_params.tsv")
generate_workflow_params(workflow_config, workflow_params)
paramspace = Paramspace(pd.read_csv(workflow_params, sep="\t"))

rule all:
    input:
        "results/aggregated_results.tsv"

rule generate_data:
    params:
        simulation = paramspace.instance
    output:
        f"results/simulations/{paramspace.wildcard_pattern}.tsv"
    shell:
        'simulate_data --config "{params.simulation}" --output "{output}"'

rule statistical_analysis:
    params:
        simulation=paramspace.instance
    input:
        data = f"results/simulations/{paramspace.wildcard_pattern}.tsv"
    output:
        f"results/statistical_testing/{paramspace.wildcard_pattern}.tsv"
    shell:
        'statistical_test --config "{params.simulation}" --dataset "{input.data}" --output "{output}"'

rule concatenate_results:
    input:
        expand('results/statistical_testing/{params}.tsv',params=paramspace.instance_patterns)
    output:
        "results/concatenated_results.tsv"
    run:
        df = pd.concat([pd.read_csv(f, sep="\t") for f in input])
        df.to_csv(output[0], sep="\t", index=False)


rule aggregate_results:
    input:
        "results/concatenated_results.tsv"
    output:
        "results/aggregated_results.tsv"
    shell:
        'aggregate_results --concatenated_results "{input}" --aggregated_results "{output}"'

rule plot_results:
    input:
        "results/aggregated_results.tsv"
    output:
        directory("results/plots/histograms/")
    shell:
        'plot_histograms --aggregated_results "{input}" --output_dir "{output}"'
